// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LobbyPackets
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PlayerData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlayerData GetRootAsPlayerData(ByteBuffer _bb) { return GetRootAsPlayerData(_bb, new PlayerData()); }
  public static PlayerData GetRootAsPlayerData(ByteBuffer _bb, PlayerData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong SteamId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ushort PlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte Status { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<LobbyPackets.PlayerData> CreatePlayerData(FlatBufferBuilder builder,
      ulong steam_id = 0,
      ushort player_id = 0,
      byte status = 0) {
    builder.StartTable(3);
    PlayerData.AddSteamId(builder, steam_id);
    PlayerData.AddPlayerId(builder, player_id);
    PlayerData.AddStatus(builder, status);
    return PlayerData.EndPlayerData(builder);
  }

  public static void StartPlayerData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSteamId(FlatBufferBuilder builder, ulong steamId) { builder.AddUlong(0, steamId, 0); }
  public static void AddPlayerId(FlatBufferBuilder builder, ushort playerId) { builder.AddUshort(1, playerId, 0); }
  public static void AddStatus(FlatBufferBuilder builder, byte status) { builder.AddByte(2, status, 0); }
  public static Offset<LobbyPackets.PlayerData> EndPlayerData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LobbyPackets.PlayerData>(o);
  }
};

public struct PlayersData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlayersData GetRootAsPlayersData(ByteBuffer _bb) { return GetRootAsPlayersData(_bb, new PlayersData()); }
  public static PlayersData GetRootAsPlayersData(ByteBuffer _bb, PlayersData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayersData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LobbyPackets.PlayerData? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LobbyPackets.PlayerData?)(new LobbyPackets.PlayerData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LobbyPackets.PlayersData> CreatePlayersData(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlayersData.AddData(builder, dataOffset);
    return PlayersData.EndPlayersData(builder);
  }

  public static void StartPlayersData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LobbyPackets.PlayerData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LobbyPackets.PlayerData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LobbyPackets.PlayersData> EndPlayersData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LobbyPackets.PlayersData>(o);
  }
};

public struct PlayerSteamID : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlayerSteamID GetRootAsPlayerSteamID(ByteBuffer _bb) { return GetRootAsPlayerSteamID(_bb, new PlayerSteamID()); }
  public static PlayerSteamID GetRootAsPlayerSteamID(ByteBuffer _bb, PlayerSteamID obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerSteamID __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong SteamId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<LobbyPackets.PlayerSteamID> CreatePlayerSteamID(FlatBufferBuilder builder,
      ulong steam_id = 0) {
    builder.StartTable(1);
    PlayerSteamID.AddSteamId(builder, steam_id);
    return PlayerSteamID.EndPlayerSteamID(builder);
  }

  public static void StartPlayerSteamID(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddSteamId(FlatBufferBuilder builder, ulong steamId) { builder.AddUlong(0, steamId, 0); }
  public static Offset<LobbyPackets.PlayerSteamID> EndPlayerSteamID(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LobbyPackets.PlayerSteamID>(o);
  }
};


}
