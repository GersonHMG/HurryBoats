// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WeaponManagerPackets
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RegisterWeapon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RegisterWeapon GetRootAsRegisterWeapon(ByteBuffer _bb) { return GetRootAsRegisterWeapon(_bb, new RegisterWeapon()); }
  public static RegisterWeapon GetRootAsRegisterWeapon(ByteBuffer _bb, RegisterWeapon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RegisterWeapon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string WeaponName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeaponNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetWeaponNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetWeaponNameArray() { return __p.__vector_as_array<byte>(4); }
  public ushort WeaponId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<WeaponManagerPackets.RegisterWeapon> CreateRegisterWeapon(FlatBufferBuilder builder,
      StringOffset weapon_nameOffset = default(StringOffset),
      ushort weapon_id = 0) {
    builder.StartTable(2);
    RegisterWeapon.AddWeaponName(builder, weapon_nameOffset);
    RegisterWeapon.AddWeaponId(builder, weapon_id);
    return RegisterWeapon.EndRegisterWeapon(builder);
  }

  public static void StartRegisterWeapon(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddWeaponName(FlatBufferBuilder builder, StringOffset weaponNameOffset) { builder.AddOffset(0, weaponNameOffset.Value, 0); }
  public static void AddWeaponId(FlatBufferBuilder builder, ushort weaponId) { builder.AddUshort(1, weaponId, 0); }
  public static Offset<WeaponManagerPackets.RegisterWeapon> EndRegisterWeapon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WeaponManagerPackets.RegisterWeapon>(o);
  }
};

public struct UnregisterWeapon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static UnregisterWeapon GetRootAsUnregisterWeapon(ByteBuffer _bb) { return GetRootAsUnregisterWeapon(_bb, new UnregisterWeapon()); }
  public static UnregisterWeapon GetRootAsUnregisterWeapon(ByteBuffer _bb, UnregisterWeapon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnregisterWeapon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort WeaponId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<WeaponManagerPackets.UnregisterWeapon> CreateUnregisterWeapon(FlatBufferBuilder builder,
      ushort weapon_id = 0) {
    builder.StartTable(1);
    UnregisterWeapon.AddWeaponId(builder, weapon_id);
    return UnregisterWeapon.EndUnregisterWeapon(builder);
  }

  public static void StartUnregisterWeapon(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddWeaponId(FlatBufferBuilder builder, ushort weaponId) { builder.AddUshort(0, weaponId, 0); }
  public static Offset<WeaponManagerPackets.UnregisterWeapon> EndUnregisterWeapon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WeaponManagerPackets.UnregisterWeapon>(o);
  }
};

public struct SelectWeapon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SelectWeapon GetRootAsSelectWeapon(ByteBuffer _bb) { return GetRootAsSelectWeapon(_bb, new SelectWeapon()); }
  public static SelectWeapon GetRootAsSelectWeapon(ByteBuffer _bb, SelectWeapon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SelectWeapon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort LastWeaponId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort WeaponId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<WeaponManagerPackets.SelectWeapon> CreateSelectWeapon(FlatBufferBuilder builder,
      ushort last_weapon_id = 0,
      ushort weapon_id = 0) {
    builder.StartTable(2);
    SelectWeapon.AddWeaponId(builder, weapon_id);
    SelectWeapon.AddLastWeaponId(builder, last_weapon_id);
    return SelectWeapon.EndSelectWeapon(builder);
  }

  public static void StartSelectWeapon(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLastWeaponId(FlatBufferBuilder builder, ushort lastWeaponId) { builder.AddUshort(0, lastWeaponId, 0); }
  public static void AddWeaponId(FlatBufferBuilder builder, ushort weaponId) { builder.AddUshort(1, weaponId, 0); }
  public static Offset<WeaponManagerPackets.SelectWeapon> EndSelectWeapon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WeaponManagerPackets.SelectWeapon>(o);
  }
};


}
