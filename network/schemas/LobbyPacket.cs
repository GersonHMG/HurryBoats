// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LobbyPacket
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct data_requester : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static data_requester GetRootAsdata_requester(ByteBuffer _bb) { return GetRootAsdata_requester(_bb, new data_requester()); }
  public static data_requester GetRootAsdata_requester(ByteBuffer _bb, data_requester obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public data_requester __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<LobbyPacket.data_requester> Createdata_requester(FlatBufferBuilder builder,
      ulong player_id = 0) {
    builder.StartTable(1);
    data_requester.AddPlayerId(builder, player_id);
    return data_requester.Enddata_requester(builder);
  }

  public static void Startdata_requester(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerId(FlatBufferBuilder builder, ulong playerId) { builder.AddUlong(0, playerId, 0); }
  public static Offset<LobbyPacket.data_requester> Enddata_requester(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LobbyPacket.data_requester>(o);
  }
};

public struct players : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static players GetRootAsplayers(ByteBuffer _bb) { return GetRootAsplayers(_bb, new players()); }
  public static players GetRootAsplayers(ByteBuffer _bb, players obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public players __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong List(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int ListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetListBytes() { return __p.__vector_as_span<ulong>(4, 8); }
#else
  public ArraySegment<byte>? GetListBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ulong[] GetListArray() { return __p.__vector_as_array<ulong>(4); }

  public static Offset<LobbyPacket.players> Createplayers(FlatBufferBuilder builder,
      VectorOffset listOffset = default(VectorOffset)) {
    builder.StartTable(1);
    players.AddList(builder, listOffset);
    return players.Endplayers(builder);
  }

  public static void Startplayers(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddList(FlatBufferBuilder builder, VectorOffset listOffset) { builder.AddOffset(0, listOffset.Value, 0); }
  public static VectorOffset CreateListVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateListVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<LobbyPacket.players> Endplayers(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LobbyPacket.players>(o);
  }
};


}
